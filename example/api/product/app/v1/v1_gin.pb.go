// Code generated by github.com/mohuishou/protoc-gen-go-gin. DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	ginx "github.com/varluffy/rich/transport/http/gin/ginx"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the mohuishou/protoc-gen-go-gin package it is being compiled against.
// context.metadata.
//gin.ginx.

type BlogServiceHTTPServer interface {
	CreateArticle(context.Context, *Article) (*Article, error)

	GetArticles(context.Context, *GetArticlesReq) (*GetArticlesResp, error)
}

func RegisterBlogServiceHTTPServer(r gin.IRouter, srv BlogServiceHTTPServer) {
	s := BlogService{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type BlogService struct {
	server BlogServiceHTTPServer
	router gin.IRouter
}

func (s *BlogService) GetArticles_0(ctx *gin.Context) {
	var in GetArticlesReq

	if err := ginx.ShouldBindUri(ctx, &in); err != nil {
		ginx.ErrorResponse(ctx, err)
		return
	}

	if err := ginx.ShouldBind(ctx, &in); err != nil {
		ginx.ErrorResponse(ctx, err)
		return
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(BlogServiceHTTPServer).GetArticles(newCtx, &in)
	if err != nil {
		ginx.ErrorResponse(ctx, err)
		return
	}

	ginx.Response(ctx, out)
}

func (s *BlogService) GetArticles_1(ctx *gin.Context) {
	var in GetArticlesReq

	if err := ginx.ShouldBind(ctx, &in); err != nil {
		ginx.ErrorResponse(ctx, err)
		return
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(BlogServiceHTTPServer).GetArticles(newCtx, &in)
	if err != nil {
		ginx.ErrorResponse(ctx, err)
		return
	}

	ginx.Response(ctx, out)
}

func (s *BlogService) CreateArticle_0(ctx *gin.Context) {
	var in Article

	if err := ginx.ShouldBindUri(ctx, &in); err != nil {
		ginx.ErrorResponse(ctx, err)
		return
	}

	if err := ginx.ShouldBind(ctx, &in); err != nil {
		ginx.ErrorResponse(ctx, err)
		return
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := s.server.(BlogServiceHTTPServer).CreateArticle(newCtx, &in)
	if err != nil {
		ginx.ErrorResponse(ctx, err)
		return
	}

	ginx.Response(ctx, out)
}

func (s *BlogService) RegisterService() {

	s.router.Handle("GET", "/v1/author/:author_id/articles", s.GetArticles_0)

	s.router.Handle("GET", "/v1/articles", s.GetArticles_1)

	s.router.Handle("POST", "/v1/author/:author_id/articles", s.CreateArticle_0)

}
